# Load the rails application
require File.expand_path('../application', __FILE__)


######## BEGIN DQOR CONFIG

# DrQueue variables
ENV['DRQUEUE_MASTER'] ||= '192.168.1.1'
ENV['DRQUEUE_TMP'] ||= "/usr/local/drqueue"
ENV['DRQUEUE_TMP'] ||= "/usr/local/drqueue/tmp"
ENV['DRQUEUE_ETC'] ||= "/usr/local/drqueue/etc"
ENV['DRQUEUE_LOGS'] ||= "/usr/local/drqueue/logs"

# owner and group of DrQueueOnRails instance
ENV['DQOR_USER'] ||= "kaazoo"
ENV['DQOR_GROUP'] ||= "staff"
# name of instance
ENV['DQOR_INSTANCE_NAME'] ||= "Example company"
# email sender
ENV['DQOR_MAIL_FROM'] ||= "example@example.com"
# admin email address
ENV['DQOR_MAIL_ADMIN'] ||= "example@example.com"

### TODO:
# LDAP variables
ENV['LDAP_TREEBASE'] ||= "dc=drqueue, dc=org"
ENV['LDAP_HOST'] ||= "127.0.0.1"
ENV['LDAP_PORT'] ||= "389"
ENV['LDAP_FILTER'] ||= "uid"
ENV['LDAP_ATTRS'] ||= "mail,cn"

# protocol for webserver (HTTP, HTTPS)
ENV['WEB_PROTO'] ||= "http"

# user status, quota (disk space in GB), job priorities 
ENV['USER_STATUS'] ||= "demo,customer,advanced,admin"
ENV['USER_QUOTA'] ||= "5,15,25,35"
ENV['USER_PRIO'] ||= "100,500,750,1000"

### TODO:
# suffix for user's temp dir (use "id" for number, "ldap_account" for user's account name)
ENV['USER_TMP_DIR'] ||= "id"

# available renderers on DrQueue slaves
# HINT: Your slaves must be a member of these pools.
# possible values:
# Blender (internal renderer): "blender"
# Blender (LuxRender renderer): "blenderlux"
# Cinema 4D: "cinema4d"
# LuxRender Standalone: "luxrender"
# Maya (internal renderer): "maya"
# Maya (MentalRay renderer): "mayamr"
# MentalRay Standalone: "mentalray"
# V-Ray Standalone: "vray" 
#ENV['AVAIL_RENDERERS'] ||= "blender,blenderlux,cinema4d,luxrender,maya,mayamr,mentalray,vray"
ENV['AVAIL_RENDERERS'] ||= "blender"

# enable / disable features
ENV['DQOR_TUTORIALS'] ||= "true"
ENV['DQOR_SHOW_FRAME_IMG'] ||= "true"
ENV['DQOR_JOB_SPECIFY_PATH'] ||= "true"
ENV['DQOR_JOB_SINGLE_FRAME'] ||= "true"
ENV['DQOR_JOB_SPECIFY_BLOCKSIZE'] ||= "true"

# CloudControl support
ENV['CLOUDCONTROL'] ||= "false"
# fees by AWS for t1.micro, m1.small, m1.medium, m1.large, m1.xlarge, c1.xlarge in USD
ENV['CC_AWS_FEES'] ||= "0.02,0.085,0.17,0.34,0.68,0.744"
# value added tax (VAT) percentage by Amazon
ENV['CC_AWS_VAT_PERCENTAGE'] ||= "1.19"
# service fees for customers in USD
ENV['CC_SERVICE_FEES'] ||= "0.5,0.55,0.6,0.65,0.7,0.7"
# service fees for beta users in USD
ENV['CC_SERVICE_BETA_FEES'] ||= "0.2,0.225,0.25,0.275,0.3,0.3"
# discounts
ENV['CC_DISCOUNTS'] ||= "1.0,0.95,0.9,0.85,0.8,0.75,0.7"
# maximum number of VMs per user
ENV['CC_MAX_VMS_PER_USER'] ||= "25"

# PayPal marchant account
ENV['PP_API_LOGIN'] ||= "your-api-login"
ENV['PP_API_PASSWORD'] ||= "your-api-pw"
ENV['PP_API_SIGNATURE'] ||= "your-api-sig"
ENV['PP_PERCENTAGE'] ||= "1.0355"
ENV['PP_TRANSACTION_FEE'] ||= "0.35"

# free rendersessions
ENV["FREE_RS_NUM_SLAVES"] ||= "3"
ENV["FREE_RS_RUN_TIME"] ||= "1"
ENV["FREE_RS_VM_TYPE"] ||= "m1.large"

# revision version number
APP_VERSION = IO.popen("git show --abbrev-commit | head -n 1").readline.split(" ")[1]

######## END DQOR CONFIG


# RubyPython is started only once at the start of the app
require 'rubypython'
RubyPython.start(:python_exe => "python2.7")
sys = RubyPython.import "sys"
sys.argv = [""]
# fix module search path on OSX
pyos = sys.version.to_s
if pyos.include?("2.7") && pyos.include?("Apple")
    puts "Detected built-in Python on OSX. Fixing sys.path."
    sys.path.extend(Dir.glob("/Library/Python/2.7/site-packages/*.egg"))
end
$pyDrQueue = RubyPython.import("DrQueue")
$pyDrQueueClient = $pyDrQueue.Client.new
$pyDrQueueJob = RubyPython.import("DrQueue.job").Job


# Initialize the rails application
DrQueueOnRails::Application.initialize!
